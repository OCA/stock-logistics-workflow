-
  In order to test stock inbound picking partial invoicing
  I have to ensure that I can create supplier invoices for a quantity less
  than the move quantity or for less items than what was received.

-
  I create a manual stock picking in
-
  !record {model: stock.picking, id: incoming_shipment_1}:
    picking_type_id: stock.picking_type_in
    invoice_state: '2binvoiced'
    partner_id: base.res_partner_2

-
  !record {model: stock.move, id: incoming_shipment_1_product_1}:
    company_id: base.main_company
    picking_id: incoming_shipment_1
    product_id: stock.product_icecream
    product_uom: product.product_uom_kgm
    product_uom_qty: 4.0
    invoice_state: '2binvoiced'
    location_id: stock.stock_location_suppliers
    location_dest_id: stock.stock_location_stock
-
  !record {model: stock.move, id: incoming_shipment_1_product_2}:
    company_id: base.main_company
    picking_id: incoming_shipment_1
    product_id: stock.product_icecream
    product_uom: product.product_uom_kgm
    product_uom_qty: 4.0
    invoice_state: '2binvoiced'
    location_id: stock.stock_location_suppliers
    location_dest_id: stock.stock_location_stock
-
  Then I confirm the picking
-
  !python {model: stock.picking}: |
    pick = self.browse(cr, uid, ref("incoming_shipment_1"), context=context)
    pick.action_confirm()

-
  I receive 2 units of  the first product.
-
  !python {model: stock.transfer_details}: |
    context.update({'active_model': 'stock.picking', 'active_id': ref('incoming_shipment_1'), 'active_ids': [ref('incoming_shipment_1')]})
-
  !record {model: stock.transfer_details, id: partial_incoming_shipment_1}:
    picking_id: incoming_shipment_1
    item_ids:
        - quantity: 2
          product_id: stock.product_icecream
          product_uom_id: product.product_uom_kgm
          sourceloc_id: stock.stock_location_suppliers
          destinationloc_id: stock.stock_location_stock
-
  !python {model: stock.transfer_details }: |
    self.do_detailed_transfer(cr, uid, [ref('partial_incoming_shipment_1')], context=context)
-
  I make invoice of the incoming shipment.
-
  !python {model: stock.invoice.onshipping}: |
    shipment = self.pool.get('stock.picking').browse(cr, uid, ref("incoming_shipment_1"))
    context.update({'active_model': 'stock.picking', 'active_id': ref('incoming_shipment_1'), 'active_ids': [ref('incoming_shipment_1')]})
-
  !record {model: stock.invoice.onshipping, id: invoice_1_incoming_shipment_1}:
    group: False
    line_ids:
        - picking_id: incoming_shipment_1
          move_id: incoming_shipment_1_product_1
          product_qty: 2
          invoiced_qty: 1
-
  !python {model: stock.invoice.onshipping }: |
    self.create_invoice(cr, uid, [ref('invoice_1_incoming_shipment_1')],
    context=context)
-
  I check invoice status of incoming shipment.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("incoming_shipment_1"))
    assert shipment.invoice_state == '2binvoiced', 'Invoice state is invoiced, but only part of the incoming shipment was invoiced.'
-
  I check that the total quantity on the invoice is 1
-
  !python {model: account.invoice}: |
    incoming_shipment_1_product_1 = self.pool.get('stock.move').browse(cr, uid, ref('incoming_shipment_1_product_1'), context=context)
    for invoice_line in incoming_shipment_1_product_1.invoice_lines:
        product_qty = 0.0
        invoice = invoice_line.invoice_id
        for inv_line in invoice.invoice_line:
            product_qty += inv_line.quantity
        assert product_qty == 1, "More or less than 1 unit was invoiced"
-
  I make another invoice of the incoming shipment
-
  !python {model: stock.invoice.onshipping}: |
    shipment = self.pool.get('stock.picking').browse(cr, uid, ref("incoming_shipment_1"))
    context.update({'active_model': 'stock.picking', 'active_id': ref('incoming_shipment_1'), 'active_ids': [ref('incoming_shipment_1')]})
-
  !record {model: stock.invoice.onshipping, id: invoice_2_incoming_shipment_1}:
    group: False
    line_ids:
        - picking_id: incoming_shipment_1
          move_id: incoming_shipment_1_product_1
          product_qty: 1
          invoiced_qty: 1
-
  !python {model: stock.invoice.onshipping }: |
    self.create_invoice(cr, uid, [ref('invoice_2_incoming_shipment_1')],
    context=context)
-
  I check that the invoice status of incoming shipment is now Invoiced.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("incoming_shipment_1"))
    assert shipment.invoice_state == 'invoiced', 'Invoice state is not invoiced, but the whole incoming shipment was invoiced'
-
  I check that the total quantity on the invoices created for this shipment is 2
-
  !python {model: account.invoice}: |
    incoming_shipment_1_product_1 = self.pool.get('stock.move').browse(cr, uid, ref('incoming_shipment_1_product_1'), context=context)
    product_qty = 0.0
    for invoice_line in incoming_shipment_1_product_1.invoice_lines:
        invoice = invoice_line.invoice_id
        for inv_line in invoice.invoice_line:
            product_qty += inv_line.quantity
    assert product_qty == 2, "More or less than 2 units have been invoiced in total for this incoming shipment"