-
  In order to test stock picking out spliting
  I have to ensure when I split out picking, related backorder is not in state done
-
  I create a new GameBoy2 product for my tests
-
  !record {model: product.product, id: product_gameboy2}:
    categ_id: product.product_category_1
    name: GameBoy2
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
-
  I add some stock for the product
-
  !python {model: stock.change.product.qty}: |
    data = {'product_id': ref('product_gameboy2'),
            'new_quantity': 130,
            'location_id': ref('stock.stock_location_stock'),
            }
    self.create(data).change_product_qty()
-
  I create a manual stock picking out
-
  !record {model: stock.picking, id: outgoing_shipment_gameboy2}:
    picking_type_id: stock.picking_type_out
    origin: 'outgoing shipment main_warehouse'
    partner_id: base.res_partner_4
    move_lines:
      - product_id: product_gameboy2
        product_uom: product.product_uom_unit
        product_uom_qty: 130.0
        picking_type_id: stock.picking_type_out
        location_id: stock.stock_location_stock
        location_dest_id: stock.stock_location_7
-
  I reserve  the picking and split my shippement in two 40/90
-
  !python {model: stock.picking, id: outgoing_shipment_gameboy2}: |
    self.action_assign()
    assert self.state == 'assigned', "Picking should have been assigned"
    assert len(self.pack_operation_ids) == 1, "There should be exactly one pack operation line"
    olds = self.search([])
    self.pack_operation_ids.qty_done = 40
    self.do_split()
    assert len(self.pack_operation_ids) == 1, "There should be exactly one pack operation line after the split"
    assert len(self.move_lines) == 1, "There should be exactly one move after the split"
    assert self.state == 'assigned', "The picking should be assigned after splitting"
    assert self.pack_operation_ids.qty_done == 40, "The pack operation on the original picking should have 40 done"
    assert self.pack_operation_ids.product_qty == 40, "The pack operation on the original picking should have 40 to do"
    assert self.move_lines.product_qty == 40, "The move line on the original should have a quantity of 40"
    news = self.search([])
    new_picking = news - olds
    assert new_picking.state == 'assigned', "The new picking should be assigned"
    assert len(new_picking.pack_operation_ids) == 1, "There should be exactly one pack operation on the new picking"
    assert new_picking.pack_operation_ids.qty_done == 0, "There shouldn't be any amount done on the new picking"
    assert new_picking.pack_operation_ids.product_qty == 90, "There should be 90 Pcs to do on the new picking"
