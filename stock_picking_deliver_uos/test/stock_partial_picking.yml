-
  I create a picking OUT
-
  !record {model: stock.picking.out, id: partial_picking_out}:
    partner_id: base.res_partner_2
-
  I add lines
-
  !python {model: stock.picking}: |
    self.write(cr, uid, [ref('partial_picking_out')], {
      'move_lines': [
        (0, 0, {
          'name': 'product_product_24',
          'product_id': ref("product.product_product_24"),
          'product_qty': 4,
          'product_uos_qty': 5,
          'product_uom': ref("product.product_uom_unit"),
          'product_uos': ref("product.product_uom_dozen"),
          'location_id': ref("stock.stock_location_stock"),
          'location_dest_id': ref("stock.stock_location_customers"),
          }),
        (0, 0, {
          'name': 'product_product_20',
          'product_id': ref("product.product_product_20"),
          'product_qty': 4,
          'product_uos_qty': 5,
          'product_uom': ref("product.product_uom_unit"),
          'product_uos': ref("product.product_uom_dozen"),
          'location_id': ref("stock.stock_location_stock"),
          'location_dest_id': ref("stock.stock_location_customers"),
          }),
        ],
      })
-
  Then I confirm the picking
-
  !python {model: stock.picking}: |
    self.action_assign(cr, uid, [ref("partial_picking_out")])
-
  Then I force the Assignment
-
  !python {model: stock.picking}: |
    self.force_assign(cr, uid, [ref("partial_picking_out")])
-
  I select for this file a user that is not admin
-
  !context
    uid: 'base.user_demo'
-
  I create a stock.partial picking, check default values, Onchange method and i deliver the picking
-
  !python {model: stock.partial.picking}: |
    context.update({'active_model': 'stock.picking', 'active_id': ref('partial_picking_out'), 'active_ids': [ref('partial_picking_out')]})
    wizard_id = self.create(cr,uid,{},context)
    wizard = self.browse(cr, uid, wizard_id)
    picking = self.pool.get('stock.picking.out').browse(cr, uid, ref('partial_picking_out'))
    wiz_line_obj = self.pool.get('stock.partial.picking.line')
    assert len(wizard.move_ids) == 2, "Wrong line's quantity"
    for wiz_line in wizard.move_ids:
      assert wiz_line.move_id.product_uos_qty == wiz_line.product_uos_qty, "Default Product UOS QTY not correspond"
      assert wiz_line.move_id.product_uos.id == wiz_line.product_uos.id, "Default Product UOS not correspond"
      product_uos_qty = wiz_line.product_uos_qty/2
      result = wiz_line.on_change_product_uos_qty((product_uos_qty), wiz_line.move_id.id, context=None)
      assert result['value']['quantity'] == (wiz_line.quantity/2), "On change method return wrong value"
      quantity = result['value']['quantity']
      wiz_line_obj.write(cr, uid, [wiz_line.id], {
        'quantity': quantity,
        'product_uos_qty': product_uos_qty,
        }, context)
    self.do_partial(cr, uid, [wizard_id], context=context)
-
  Finally i check picking line after deliver
-
  !python {model: stock.picking.out}: |
    picking = self.browse(cr, uid, ref("partial_picking_out"))
    assert len(picking.move_lines) == 2, "Wrong line's quantity"
    for line in picking.move_lines:
      if line.product_id.id == ref('product.product_product_20'):
        assert line.product_qty == 2.0, "Wrong product_qty on line on product_20"
        assert line.product_uos_qty == 2.5, "Wrong product_uos_qty on line on product_20: %s" % line.product_uos_qty
      elif line.product_id.id == ref('product.product_product_24'):
        assert line.product_qty == 2.0, "Wrong Value on line on product_24"
        assert line.product_uos_qty == 2.5, "Wrong product_uos_qty on line on product_24: %s" % line.product_uos_qty
